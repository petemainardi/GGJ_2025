using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using MainArtery.Utilities;

/// ===========================================================================================
/// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
/// ===========================================================================================
/**
 *  This class does things...
 */
/// ===========================================================================================
/// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
/// ===========================================================================================
public class DialogueManager : SceneSingleton<DialogueManager>
{
	/// =======================================================================================
	/// Fields
	/// =======================================================================================
	public Transform DialogueParent;
	public DialogueBox SpeechBubblePrefab;

	public float DefaultLifetime = 5f;
	/// =======================================================================================
	/// Mono
	/// =======================================================================================
	void Awake()
	{
			
	}
	/// ---------------------------------------------------------------------------------------
	void Start()
	{
			
	}
	/// =======================================================================================
	/// Methods
	/// =======================================================================================
	public void Add(string text, IDialogueSource source, bool requestResponse = false)
	{
        DialogueBox bubble = Instantiate(SpeechBubblePrefab, DialogueParent);
		bubble.Init(text, source, requestResponse ? float.MaxValue : DefaultLifetime);
	}

	public void Clear(IDialogueSource source)
	{
		DialogueParent.GetComponentsInChildren<DialogueBox>()
			.Where(box => box.Source == source)
			.ForEvery(box => box.LifeTime = Math.Min(box.LifeTime, 1));
	}
	/// =======================================================================================
}
/// ===========================================================================================
/// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
/// ===========================================================================================